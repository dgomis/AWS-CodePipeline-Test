AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ce template deploie un VPC avec la creation de sous-reseaux repartis dans plusieurs zones de disponibilite, ...                 
#
#........ D. GOMIS ........ #####
#
Mappings: 
  RegionMap: 
    eu-west-3:
      AMI: "ami-089d839e690b09b28"
    eu-west-2:
      AMI: "ami-0e169fa5b2b2f88ae"
    eu-west-1:
      AMI: "ami-0dc8d444ee2a42d8a"
Parameters:
  Owner:
    Description: Renseigner le nom du createur du template
    Type: String
    Default: D. GOMIS
  Project:
    Description: Renseigner le nom du project
    Type: String
    Default: Utilisation de AWS CodePipeline pour deployer des piles avec CloudFormation
  VpcCidrBlock:
    Type: String
    MinLength: '11'
    MaxLength: '18'
    Default: 10.0.0.0/16
    Description: Renseigner le block cidr du reseau VPC
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Doit etre une plage CIDR valide de la forme x.x.x.x / x
  VPN:
    Description: Entrer la Plage d'adresses IP du reseau distant
    Type: String
    MinLength: '11'
    MaxLength: '18'
    Default: 172.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Doit etre une plage CIDR valide de la forme x.x.x.x / x
  IPPublicDistant:
    Description: Ip public du client distant
    Type: String
    ConstraintDescription: Renseigner l'IP du client autorise a se connecter au serveur
  AdresseEmail:
    Description: Adresse mail de contact
    Type: String
    ConstraintDescription: Renseigner l'adresse mail de contact pour les alertes mails
  DBName:
    Default: wordpressdb
    Description: Ma base de donnee
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Doit commencer par une lettre et ne contenir que des caracteres alphanumeriques.
  DBUsername:
    NoEcho: 'true'
    Description: L'utilisateur autorise a acceder a la BDD
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Doit commencer par une lettre et ne contenir que des caracteres alphanumeriques.
  DBPassword:
    NoEcho: 'true'
    Description: Mot de passe pour l'acces a la BDD
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Contient uniquement des caracteres alphanumeriques.
  WPAdminUsername:
    NoEcho: 'true'
    Description: L'utilisateur autorise a acceder a l'interface wordpress 
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Doit commencer par une lettre et ne contenir que des caracteres alphanumeriques.
  WpAdminPassword:
    NoEcho: 'true'
    Description: Mot de passe pour l'acces web de wordpress
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Contient uniquement des caracteres alphanumeriques.
#---- PARTIE RESEAU : VPC et sous-reseaux 
#
#------ Création du VPC avec son block CIDR ------
Resources:
  InfraVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: InfraVPC
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
#------ Creation de trois sous-reseaux prives dans les zones A, B et C
#
#------ Creation du sous-reseau prive de la zone A
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt InfraVPC.CidrBlock, 1, 8 ]]
      Tags:
        - Key: Name
          Value: 'PrivateSubnetA'
      VpcId: !Ref InfraVPC
#------ Creation du sous-reseau prive de la zone B
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: Name
        Value: 'PrivateSubnetB'
      VpcId: !Ref InfraVPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt InfraVPC.CidrBlock, 2, 8 ]]
#------ Creation du sous-reseau prive de la zone C
  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: Name
        Value: 'PrivateSubnetC'
      VpcId: !Ref InfraVPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt InfraVPC.CidrBlock, 3, 8 ]]
#------ Creation de trois sous-reseaux publics identiquent pour la
#------ haute disponibilite des serveurs dans les zones A, B et C
#
#------ Creation du sous-reseau public de la zone A
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 100, !Cidr [ !GetAtt InfraVPC.CidrBlock, 101, 8 ]]
      Tags:
        - Key: Name
          Value: 'PublicSubnetA'
      VpcId: !Ref InfraVPC
#------ Creation du sous-reseau public de la zone B
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: Name
        Value: 'PublicSubnetB'
      VpcId: !Ref InfraVPC
      CidrBlock: !Select [ 101, !Cidr [ !GetAtt InfraVPC.CidrBlock, 102, 8 ]]
#------ Creation du sous-reseau public de la zone C
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: Name
        Value: 'PublicSubnetC'
      VpcId: !Ref InfraVPC
      CidrBlock: !Select [ 102, !Cidr [ !GetAtt InfraVPC.CidrBlock, 103, 8 ]]
#------ Creation des groupes de sous-reseaux pour les instances de bases de donnees Master et Replica
  DBPublicSubnet:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties: 
      DBSubnetGroupDescription: Groupe de sous-reseaux pour la BDD
      SubnetIds: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: DBPublicSubnet
#------ Creation de la passerelle de sortie internet pour pouvoir rendre trois sous-réseaux   
#------ des différentes zones A, B et C publics et les faire communiquer avec le VPC
  VPCInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'VPCInternetGateway'
#------ On associe la passerelle Internet creee au VPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref InfraVPC
      InternetGatewayId: !Ref VPCInternetGateway
#------ Creation des adresses IP Elastiques (adresses IPv4 publiques accessibles depuis
#------ Internet) qui seront associees aux passerelles Nat des sous-reseaux prives
#
#---------- Creation d'une ip elastique qui sera associee a la passerelle Nat du sous-reseau prive de la zone A
  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: NatEipA
      Domain: vpc
#---------- Creation d'une ip elastique qui sera associee a la passerelle Nat du sous-reseau prive de la zone B 
  NatEipB:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: NatEipB
      Domain: vpc
#---------- Creation d'une ip elastique qui sera associee a la passerelle Nat du sous-reseau prive de la zone C
  NatEipC:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: NatEipC
      Domain: vpc
#------ Creation de la passerelle Nat pour le sous-reseau prive de la zone A
  NatGatewayA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref PrivateSubnetA
      Tags:
        - Key: Name
          Value: NatGatewayA
#------ Creation de la passerelle Nat pour le sous-reseau prive de la zone B          
  NatGatewayB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipB.AllocationId
      SubnetId: !Ref PrivateSubnetB
      Tags:
        - Key: Name
          Value: NatGatewayB
#------ Creation de la passerelle Nat pour le sous-reseau prive de la zone C        
  NatGatewayC:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipC.AllocationId
      SubnetId: !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: NatGatewayC
#------ TABLES DE ROUTAGE ------
#
#------ Creation de la table de routage pour le sous-reseau prive de la zone A 
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableA
#------ On associe la table de routage au sous-reseau prive 
  AttachPrivateRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
#------ Creation de la table de routage pour le sous-reseau prive de la zone B
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB
#------ On associe la table de routage au sous-reseau prive 
  AttachPrivateRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
#------ Creation de la table de routage pour le sous-reseau prive de la zone C
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableC
#------ On associe la table de routage au sous-reseau prive 
  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
#------ Creation de la table de routage pour le sous-reseau public de la zone A
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PublicRouteTableA
#------ On associe la table de routage au sous-reseau prive 
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
#------ Creation de la table de routage pour le sous-reseau public de la zone B
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PublicRouteTableB
#------ On associe la table de routage au sous-reseau prive 
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB 
#------ Creation de la table de routage pour le sous-reseau public de la zone B
  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PublicRouteTableC
#------ On associe la table de routage au sous-reseau prive 
  AttachPublicRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      SubnetId: !Ref PublicSubnetC 
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref PrivateRouteTableC
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref PublicRouteTableA
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref PublicRouteTableB
#------ Creation de la route pour rooter le trafic depuis toutes 
#------ les IP du sous-reseau prive vers sa passerelle Nat
  PublicRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref PublicRouteTableC    


