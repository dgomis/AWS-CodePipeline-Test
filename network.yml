AWSTemplateFormatVersion: 2010-09-09
#--DESCRIPTION
# exmeple script AIC - Projet 10                    
# Vincent ARSENE  
Description: AWS ClouDFormation VPC Template
#----PARTIE 1 : VPC et sous-reseaux
#------Creation du VPC openclassrooms
Resources:
  openclassroomsVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.10.0.0/16
      Tags:
        - Key: Name
          Value: openclassrooms
#------ Creation du sous reseaux prive openclassrooms-intranet
  intranet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:  us-east-2c
      CidrBlock: 10.10.1.0/24
      Tags:
        - Key: Name
          Value: 'openclassrooms-intranet'
      VpcId: !Ref openclassroomsVPC
#------ Creation de deux sous reseaux public identiquent pour
#------ la haute dispinibilite openclassrooms-wordpress-A et 
#------ openclassrooms-wordpress-B
  wordpressA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:  us-east-2a
      CidrBlock: 10.10.2.0/24
      Tags:
        - Key: Name
          Value: 'openclassrooms-wordpress-A'
      VpcId: !Ref openclassroomsVPC
  wordpressB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:  us-east-2b
      CidrBlock: 10.10.3.0/24
      Tags:
        - Key: Name
          Value: 'openclassrooms-wordpress-B'
      VpcId: !Ref openclassroomsVPC
#------ Passerelle et NAT
#-------- Creation de la passerelle internet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'openclassrooms-InternetGateway'
#-------- Attachement de la passerelle internet
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref openclassroomsVPC
      InternetGatewayId: !Ref InternetGateway
#-------- Mise en place de la nat pour le sous-reseau priveIntranet
#---------- D'abord creation d'un ip elastique
  NatEipIntranet:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
#---------- Creation de la nat
  NatGatewayIntranet:
    DependsOn: AttachInternetGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: 
        Fn::GetAtt: 
        - NatEipIntranet 
        - AllocationId
      SubnetId:
        Ref: intranet
      Tags:
       - Key: Name
         Value: 'openclassrooms-nat-intranet'
#---- Tables de routage        
#------ Creation de la table pour le reseau prive openclassrooms-intranet
#-------- Creation 
  RouteTableIntranet:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openclassroomsVPC
      Tags:
       - Key: Name
         Value: openclassrooms-route-intranet
#-------- Attachement
  AttachRouteTableIntranet:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableIntranet
      SubnetId: !Ref intranet
#-------- Configuration
  RouteIntranet:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableIntranet
#------ Creation de la table pour le reseau public wordpressA
#-------- Creation 
  RouteTableWordpressA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openclassroomsVPC
      Tags:
       - Key: Name
         Value: openclassrooms-route-wordpressA
#-------- Attachement
  AttachRouteTableWordpressA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableWordpressA
      SubnetId: !Ref wordpressA
#-------- Configuration
  RouteWordpressA:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableWordpressA
#------ Creation de la table pour le reseau public wordpressB
#-------- Creation 
  RouteTableWordpressB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openclassroomsVPC
      Tags:
       - Key: Name
         Value: openclassrooms-route-wordpressB
#-------- Attachement
  AttachRouteTableWordpressB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTableWordpressB
      SubnetId: !Ref wordpressB
 #-------- Configuration
  RouteWordpressB:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableWordpressB
#---- PARTIE 2 : RDS
#------Security Group RDS
  WordpressDBSubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: my db subnet group
      SubnetIds:
        - !Ref wordpressA
        - !Ref wordpressB
#------ Security Group RDS
  WordpressRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 10.10.0.0/16
      VpcId: !Ref openclassroomsVPC      
#---- PARTIE 3 : Machines   
#------ Security Group EC2    
  WordpressEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wordpress EC2 security group
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 22
         ToPort: 22
         CidrIp: 0.0.0.0/0
      VpcId: !Ref openclassroomsVPC
#---- PARTIE 4 : AutoScaling
#------ Launch Configuration
  WordpressLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: True
      ImageId: ami-00c5940f2b52c5d98
      InstanceType: t2.micro
      SecurityGroups:
      - !Ref WordpressEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd         
          dnf makecache
          dnf install dnf-utils wget vim nano device-mapper-persistent-data lvm2 fuse-overlayfs -y
          dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          dnf makecache
          cd /tmp/
          wget -P /tmp/ https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.1.el7.x86_64.rpm
          dnf localinstall /tmp/containerd.io-1.2.13-3.1.el7.x86_64.rpm -y
          dnf install docker-ce -y
          systemctl start docker
          systemctl enable docker          
          mkdir  ~/wp-docker && cd ~/wp-docker
          touch benitche-docker.yml
          yum install -y elrepo-release epel-release
          yum install kmod-wireguard wireguard-tools
          wg genkey | tee wg-private.key | wg pubkey > wg-public.key  
#------ Creation AutoScalingGroup
  WordpressScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WordpressLaunchConfig
      AvailabilityZones:
       - Fn::Select:
         - 0
         - Fn::GetAZs: !Ref AWS::Region
       - Fn::Select:
         - 1
         - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: 
        - !Ref wordpressA
        - !Ref wordpressB     
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref WordpressTargetGroup
      NotificationConfigurations:
      - TopicARN: !Ref SnsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
#---- PARTIE 2 : RDS
#------Security Group RDS
#------Creation du groupe de sous-reseaux pour l'instance DB
#------Groupe de securite RDS
  DockerWordpressRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acces distant a la base de donne
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 10.10.0.0/16
      VpcId: !Ref openclassroomsVPC
      Tags:
        - Key: Name
          Value: DockerWordpressRDSSecurityGroup
#------Creation Instance base de donnee Master
  DockerWordpress:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t2.micro
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      Engine: MySQL
      EngineVersion: 8.0.17
      MasterUsername: DocWorUser
      MasterUserPassword: DocWorPwd
      Port: 3306
      MultiAZ: true
      DBInstanceIdentifier: DockerWordpress
      DBSubnetGroupName: !Ref WordpressDBSubnet
      PubliclyAccessible: false      
      DBName: DockerWordpressBd
      VPCSecurityGroups:
      - Fn::GetAtt: [WordpressRDSSecurityGroup, GroupId]      
      Tags:
        - Key: Name
          Value: DockerWordpress
#---- PARTIE 5 : CloudWatch
#------ Alarme Augmentation des capacites
#-------- Creation ScaleUpPolicy
#
#------Creation alerte email
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: oupasbenith@gmail.com
          Protocol: email
#------Politique d'augmentation cpu
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressScalingGroup
      Cooldown: 1
      ScalingAdjustment: 1
#------Creation Alarme CloudWatch pour augmentation du CPU
  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 80
      AlarmDescription: Alarm CPU de mon instance
      Period: 300
      AlarmActions: 
      - Ref: ScaleUpPolicy
      - Ref: SnsTopic
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName 
        Value:
          Ref: WordpressScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: UtilisationCPUEleve
#------Creation politique de r√©duction cpu
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressScalingGroup
      Cooldown: 1
      ScalingAdjustment: -1
#------Baisse de CPU      
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 1
      AlarmDescription: Alarm CPU de mon instance
      Period: 300
      AlarmActions: 
      - Ref: ScaleDownPolicy
      - Ref: SnsTopic
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName 
        Value:
          Ref: WordpressScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: UtilisationCPUBasse
#---- PARTIE 5 : CloudWatch
#------ Alarme Augmentation des capacites
#-------- Creation ScaleUpPolicy
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressScalingGroup
      Cooldown: 1
      ScalingAdjustment: 1
#-------- Creation Alarme CloudWatch
  CPUAlarmeHight:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 80
      AlarmDescription: Declenche une alarme si le CPU est trop utilise
      Period: 300
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WordpressScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
#------ Alarme Diminution des capacites
#-------- Creation ScaleUpPolicy
  ScaleUpPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressScalingGroup
      Cooldown: 1
      ScalingAdjustment: -1
#-------- Creation Alarme CloudWatch
  CPUAlarmeHight2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 1
      AlarmDescription: Declenche une alarme si le CPU est trop utilise
      Period: 300
      AlarmActions:
      - Ref: ScaleUpPolicy2
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WordpressScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
#---- PARTIE 6 : Equilibreur de charge   
#------ Target group
  WordpressTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref openclassroomsVPC
#------ ELB 
  WordpressLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WordpressLoadBalancerSecurityGroup
      Subnets:
        - !Ref wordpressA
        - !Ref wordpressB
#------ Security Group EC2   
  WordpressLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wordpress EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref openclassroomsVPC
#------ ELB Ecoute 
  WordpressLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WordpressLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressTargetGroup      
